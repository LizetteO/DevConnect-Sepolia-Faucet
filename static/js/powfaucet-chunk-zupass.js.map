{"version":3,"file":"powfaucet-chunk-zupass.js","mappings":"oxEA2CO,IAAKA,EAAc,SAAdA,GAAc,OAAdA,EAAc,UAAdA,EAAc,sCAAdA,EAAc,UAAdA,EAAc,0BAAdA,CAAc,MAsCbC,EAAW,SAAAC,I,qRAAAC,CAAAF,EAAAC,GAAA,I,MAAAE,EAAAC,EAAAJ,GAItB,SAAAA,EAAYK,EAA0BC,GAA0B,IAAAC,EAS9D,O,4FAT8DC,CAAA,KAAAR,GACjDS,EAAAC,EAAbH,EAAAJ,EAAAQ,KAAA,KAAMN,IAAO,6BAAAI,EAAAC,EAAAH,GAAA,qBACZA,EAAKF,MAAMO,WAAmBC,QAAOH,EAAAH,GAEtCA,EAAKO,mBAAqB,SAACC,GAAiB,OAAKR,EAAKS,qBAAqBD,EAAI,EAE/ER,EAAKD,MAAQ,CACXW,WAAW,EACXC,SAAU,MACZX,CACF,CAmPC,O,EAnPAP,G,EAAA,EAAAmB,IAAA,oBAAAC,MAED,WAEE,GADAC,OAAOC,iBAAiB,UAAWC,KAAKT,oBACrCU,aAAa,qBACd,IACED,KAAKE,mBAAmBC,KAAKC,MAAMH,aAAa,uBAChDA,aAAaI,WAAW,oBAC1B,CAAE,MAAMC,GACNC,EAAQC,MAAM,gDAAiDF,EACjE,MAEG,GAAGL,aAAa,mBACnB,IACE,IAAIN,EAAWQ,KAAKC,MAAMH,aAAa,oBACvCD,KAAKS,aAAad,EACpB,CAAE,MAAMW,GACNC,EAAQC,MAAM,8CAA+CF,EAC/D,CAGJ,GAAC,CAAAV,IAAA,uBAAAC,MAED,WACEC,OAAOY,oBAAoB,UAAWV,KAAKT,oBAC3CS,KAAKW,WAAa,IACpB,GAAC,CAAAf,IAAA,SAAAC,MAEF,WAEG,OACEe,EAAAA,cAAA,OAAKC,UAAU,kCACbD,EAAAA,cAAA,OAAKC,UAAU,aACbD,EAAAA,cAAA,OAAKC,UAAU,mBAAmBC,MAAO,CAACC,gBAAiB,wCAE5Df,KAAKjB,MAAMY,SACVK,KAAKgB,mBACLhB,KAAKiB,oBAId,GAAC,CAAArB,IAAA,oBAAAC,MAEA,WAAgD,IAAAqB,EAAA,KAC9C,OACEN,EAAAA,cAAA,OAAKC,UAAU,yBAAyBM,QAAS,SAAC3B,GAAG,OAAK0B,EAAKE,cAAc,GAC3ER,EAAAA,cAAA,WAAK,gDACLA,EAAAA,cAAA,WACEA,EAAAA,cAAA,KAAGS,KAAK,IAAIF,QAAS,SAAC3B,GAAG,OAAKA,EAAI8B,gBAAgB,GAC/CtB,KAAKjB,MAAMW,UACVkB,EAAAA,cAAA,QAAMC,UAAU,kBACdD,EAAAA,cAAA,OAAKW,IAAI,sBAAsBV,UAAU,aAE3C,KAAK,sBAMjB,GAAC,CAAAjB,IAAA,mBAAAC,MAED,WAA+C,IAAA2B,EAAA,KAC7C,OACEZ,EAAAA,cAAA,OAAKC,UAAU,2BACbD,EAAAA,cAAA,OAAKC,UAAU,aAAY,qCAEzBD,EAAAA,cAACa,EAAAA,EAAc,CACbC,UAAU,SACVC,MAAO,CAAEC,KAAM,IAAKC,KAAM,KAC1BC,QAAS,SAAChD,GAAK,OAAK0C,EAAKO,uBAAuBP,EAAKzC,MAAMY,SAAUb,EAAM,GAE3E8B,EAAAA,cAAA,QAAMC,UAAU,wBAAwBb,KAAKjB,MAAMY,SAASqC,cAGhEpB,EAAAA,cAAA,WACEA,EAAAA,cAAA,KAAGS,KAAK,IAAIF,QAAS,SAAC3B,GAASA,EAAI8B,iBAAkBE,EAAKS,eAAe,GAAG,WAMpF,GAAC,CAAArC,IAAA,yBAAAC,MAED,SAA+BqC,EAA6BpD,GAC1D,OAAIoD,EAIFtB,EAAAA,cAACuB,EAAAA,EAAOC,EAAA,CAACC,GAAG,kBAAqBvD,GAC/B8B,EAAAA,cAAA,OAAKC,UAAU,eACbD,EAAAA,cAAA,aACEA,EAAAA,cAAA,aACEA,EAAAA,cAAA,UACEA,EAAAA,cAAA,MAAIC,UAAU,gBAAe,aAC7BD,EAAAA,cAAA,MAAIC,UAAU,gBAAgBqB,EAAWI,WAE3C1B,EAAAA,cAAA,UACEA,EAAAA,cAAA,MAAIC,UAAU,gBAAe,YAC7BD,EAAAA,cAAA,MAAIC,UAAU,gBAAgBqB,EAAWK,UAE3C3B,EAAAA,cAAA,UACEA,EAAAA,cAAA,MAAIC,UAAU,gBAAe,cAC7BD,EAAAA,cAAA,MAAIC,UAAU,gBAAgBqB,EAAWM,YAE3C5B,EAAAA,cAAA,UACEA,EAAAA,cAAA,MAAIC,UAAU,gBAAe,aAC7BD,EAAAA,cAAA,MAAIC,UAAU,gBAAgBqB,EAAWF,iBArB5C,IA4BX,GAAC,CAAApC,IAAA,WAAAC,MAED,WAA0B,IAAA4C,EACxB,OAA0B,QAA1BA,EAAOzC,KAAKjB,MAAMY,gBAAQ,IAAA8C,OAAA,EAAnBA,EAAqBC,KAC9B,GAAC,CAAA9C,IAAA,eAAAC,MAED,WAAuB,IAAA8C,EAAA,KAEfC,EAAkC,CACtCC,OAAQ,CACNC,aAAcC,EAAAA,iBAAiBC,IAC/BC,QAASC,EAAAA,sBAAsBC,KAC/BtD,WAAOuD,EACPC,cAAc,EACdC,gBAAiB,CACfC,SAAUvD,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOC,MAAMJ,SACvDK,WAAY5D,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOC,MAAMC,WACzDC,gBAAiB,2BAGrBC,SAAU,CACRhB,aAAcC,EAAAA,iBAAiBC,IAC/BC,QAASc,EAAAA,4BAA4BZ,KACrCtD,WAAOuD,EACPC,cAAc,GAEhBW,cAAe,CACblB,aAAcC,EAAAA,iBAAiBkB,YAC/BpE,MAAuE,GAAhEG,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOC,MAAMJ,SAASW,OAAclE,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOC,MAAMJ,cAAWH,EACnIC,cAAc,GAEhBc,eAAgB,CACdrB,aAAcC,EAAAA,iBAAiBqB,WAC/BvE,MAAO,CACLwE,gBAAgB,EAChBC,eAAe,EACfC,2BAA2B,EAC3BC,iBAAiB,GAEnBnB,cAAc,GAEhBoB,kBAAmB,CACjB3B,aAAcC,EAAAA,iBAAiB2B,OAC/B7E,MAAOG,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOiB,UAC9CtB,cAAc,GAEhBuB,UAAW,CACT9B,aAAcC,EAAAA,iBAAiB2B,OAC/B7E,MAAOG,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOkB,UAC9CvB,cAAc,IAIZwB,EAA0D,CAC9DC,KAAMtG,EAAeuG,IACrBC,UAAWhF,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOuB,aAAejF,KAAKlB,MAAMoG,cAAcC,UAAUC,UAAU,mBAAmB,GACjIxC,KAAMA,EACNK,QAAS,4BACToC,QAAS,CACPC,oBAAoB,EACpBC,MAAO,gBACPC,YAAa,+BAGXC,EAASC,mBAAmBvF,KAAKwF,UAAUd,IAC7Ce,EAAM,GAAHC,OAAM7F,KAAKlB,MAAM0E,aAAaC,QAAQC,OAAOkC,IAAG,oBAAAC,OAAmBJ,GAE1EzF,KAAKW,WAAab,OAAOgG,KAAKF,EAAK,SAAU,sCAEzC5F,KAAKjB,MAAMW,WACbM,KAAK+F,SAAS,CACZrG,WAAW,IACV,WACDiD,EAAKqD,gBACP,GAEJ,GAAC,CAAApG,IAAA,gBAAAC,MAED,WACEI,aAAaI,WAAW,mBACxBL,KAAK+F,SAAS,CACZpG,SAAU,MAEd,GAAC,CAAAC,IAAA,iBAAAC,MAGD,WAAyB,IAAAoG,EAAA,KACnBjG,KAAKW,YAGLX,KAAKjB,MAAMW,YAEZM,KAAKW,WAAWuF,QACjBlG,KAAK+F,SAAS,CACZrG,WAAW,IAEbM,KAAKW,WAAa,MAGlBwF,YAAW,kBAAMF,EAAKD,gBAAgB,GAAE,KAE5C,GAAC,CAAApG,IAAA,uBAAAC,MAED,SAA6BL,GACvBA,EAAI4G,MAA4B,WAApBC,EAAO7G,EAAI4G,OAA6C,WAAxB5G,EAAI4G,KAAKE,YAA4B9G,EAAI4G,KAAKG,YAE9FvG,KAAKE,mBAAmBV,EAAI4G,KAAKG,WACnC,GAAC,CAAA3G,IAAA,qBAAAC,MAED,SAA2B0G,GACzBhG,EAAQiG,IAAI,gBAAiBD,GAC1BvG,KAAKW,YACNX,KAAKW,WAAW8F,QACfF,EAAWH,MACZpG,KAAKS,aAAa8F,EAAWH,MAC7BnG,aAAa,mBAAqBE,KAAKwF,UAAUY,EAAWH,OAEtDG,EAAWG,WACjB1G,KAAKlB,MAAMoG,cAAcyB,WAAW,CAClCpB,MAAO,qCACPqB,KAAOhG,EAAAA,cAAA,OAAKC,UAAU,sBAAqB,IAAE0F,EAAWG,UAAU,KAAGH,EAAWM,cAChFC,YAAa,CAAEC,QAAS,UAG9B,GAAC,CAAAnH,IAAA,eAAAC,MAED,SAAqBF,GACnBK,KAAK+F,SAAS,CACZpG,SAAUA,GAEd,M,8EAAClB,CAAA,CAjQqB,CAASmC,EAAAA,eAqQjC,mBAAgB9B,GACd,OACE8B,EAAAA,cAACnC,EACKK,EAGT,C","sources":["webpack://pow-faucet-client/./src/components/frontpage/ZupassLogin.tsx"],"sourcesContent":["import { FaucetConfigContext, FaucetPageContext } from '../FaucetPage';\nimport React, { useContext } from 'react';\nimport { IFaucetConfig } from '../../common/FaucetConfig';\nimport { FaucetCaptcha } from '../shared/FaucetCaptcha';\n\nimport './ZupassLogin.css';\nimport { toQuery } from '../../utils/QueryUtils';\nimport { TypedEmitter } from 'tiny-typed-emitter';\nimport { FaucetTime } from '../../common/FaucetTime';\nimport { IFaucetContext } from '../../common/FaucetContext';\n\nimport { EdDSATicketPCDPackage } from \"@pcd/eddsa-ticket-pcd\";\nimport { SemaphoreIdentityPCDPackage } from \"@pcd/semaphore-identity-pcd\";\nimport { ArgumentTypeName } from \"@pcd/pcd-types\";\nimport { ArgsOf, PCDPackage, SerializedPCD } from \"@pcd/pcd-types\";\nimport {\n  EdDSATicketFieldsToReveal,\n  ZKEdDSAEventTicketPCD,\n  ZKEdDSAEventTicketPCDArgs,\n  ZKEdDSAEventTicketPCDPackage\n} from \"@pcd/zk-eddsa-event-ticket-pcd\";\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { IZupassLogin } from './ZupassLoginInterface';\n\nexport interface IZupassLoginProps {\n  faucetContext: IFaucetContext;\n  faucetConfig: IFaucetConfig;\n  forwardRef: React.RefObject<IZupassLogin>;\n}\n\nexport interface IZupassLoginState {\n  popupOpen: boolean;\n  authInfo: IZupassAuthInfo;\n}\n\nexport interface IZupassAuthInfo {\n  ticketId: string;\n  productId: string;\n  eventId: string;\n  attendeeId: string;\n  token: string;\n}\n\nexport enum PCDRequestType {\n  Get = \"Get\",\n  GetWithoutProving = \"GetWithoutProving\",\n  Add = \"Add\",\n  ProveAndAdd = \"ProveAndAdd\"\n}\n\nexport interface PCDRequest {\n  returnUrl: string;\n  type: PCDRequestType;\n}\n\nexport interface ProveOptions {\n  genericProveScreen?: boolean;\n  title?: string;\n  description?: string;\n  debug?: boolean;\n  proveOnServer?: boolean;\n  signIn?: boolean;\n}\n\n/**\n * When a website uses the Zupass for signing in, Zupass\n * signs this payload using a `SemaphoreSignaturePCD`.\n */\nexport interface SignInMessagePayload {\n  uuid: string;\n  referrer: string;\n}\n\nexport interface PCDGetRequest<T extends PCDPackage = PCDPackage>\n  extends PCDRequest {\n  type: PCDRequestType.Get;\n  pcdType: T[\"name\"];\n  args: ArgsOf<T>;\n  options?: ProveOptions;\n}\n\nexport class ZupassLogin extends React.PureComponent<IZupassLoginProps, IZupassLoginState> {\n  private messageEvtListener: (evt: MessageEvent) => void;\n  private loginPopop: Window;\n\n  constructor(props: IZupassLoginProps, state: IZupassLoginState) {\n    super(props);\n    (this.props.forwardRef as any).current = this;\n\n    this.messageEvtListener = (evt: MessageEvent) => this.processWindowMessage(evt);\n\n    this.state = {\n      popupOpen: false,\n      authInfo: null,\n\t\t};\n  }\n\n  public componentDidMount() {\n    window.addEventListener(\"message\", this.messageEvtListener);\n    if(localStorage['zupass.AuthResult']) {\n      try {\n        this.processLoginResult(JSON.parse(localStorage['zupass.AuthResult']));\n        localStorage.removeItem(\"zupass.AuthResult\");\n      } catch(ex) {\n        console.error(\"error parsing auth result from localstorage: \", ex);\n      }\n    }\n    else if(localStorage['zupass.AuthInfo']) {\n      try {\n        let authInfo = JSON.parse(localStorage['zupass.AuthInfo']);\n        this.loadAuthInfo(authInfo);\n      } catch(ex) {\n        console.error(\"error parsing auth info from localstorage: \", ex);\n      }\n    }\n\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener(\"message\", this.messageEvtListener);\n    this.loginPopop = null;\n  }\n\n\tpublic render(): React.ReactElement {\n\n    return (\n      <div className='faucet-auth faucet-zupass-auth'>\n        <div className='auth-icon'>\n          <div className='logo logo-zupass' style={{backgroundImage: \"url('/images/devconnect-ist.png')\"}}></div>\n        </div>\n        {this.state.authInfo ?\n          this.renderLoginState() :\n          this.renderLoginButton()\n        }\n      </div>\n    );\n\t}\n\n  private renderLoginButton(): React.ReactElement {\n    return (\n      <div className='auth-field auth-noauth' onClick={(evt) => this.onLoginClick()}>\n        <div>DevConnect attendee? Login with your Ticket.</div>\n        <div>\n          <a href=\"#\" onClick={(evt) => evt.preventDefault()}>\n            {this.state.popupOpen ?\n              <span className='inline-spinner'>\n                <img src=\"/images/spinner.gif\" className=\"spinner\" />\n              </span>\n            : null}\n            Login with Zupass\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  private renderLoginState(): React.ReactElement {\n    return (\n      <div className='auth-field auth-profile'>\n        <div className='auth-info'>\n          Authenticated with Zupass identity \n          <OverlayTrigger\n            placement=\"bottom\"\n            delay={{ show: 250, hide: 400 }}\n            overlay={(props) => this.renderZupassTicketInfo(this.state.authInfo, props)}\n          >\n            <span className=\"auth-ident-truncated\">{this.state.authInfo.attendeeId}</span>\n          </OverlayTrigger>\n        </div>\n        <div>\n          <a href=\"#\" onClick={(evt) => {evt.preventDefault(); this.onLogoutClick()}}>\n            Logout\n          </a>\n        </div>\n      </div>\n    );\n  }\n\n  private renderZupassTicketInfo(ticketInfo: IZupassAuthInfo, props: any): React.ReactElement {\n    if(!ticketInfo)\n      return null;\n    \n    return (\n      <Tooltip id=\"zupass-tooltip\" {...props}>\n        <div className='zupass-info'>\n          <table>\n            <tbody>\n              <tr>\n                <td className='zupass-title'>TicketId:</td>\n                <td className='zupass-value'>{ticketInfo.ticketId}</td>\n              </tr>\n              <tr>\n                <td className='zupass-title'>EventId:</td>\n                <td className='zupass-value'>{ticketInfo.eventId}</td>\n              </tr>\n              <tr>\n                <td className='zupass-title'>ProductId:</td>\n                <td className='zupass-value'>{ticketInfo.productId}</td>\n              </tr>\n              <tr>\n                <td className='zupass-title'>Attendee:</td>\n                <td className='zupass-value'>{ticketInfo.attendeeId}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </Tooltip>\n    );\n  }\n\n  public getToken(): string {\n    return this.state.authInfo?.token;\n  }\n  \n  private onLoginClick() {\n\n    const args: ZKEdDSAEventTicketPCDArgs = {\n      ticket: {\n        argumentType: ArgumentTypeName.PCD,\n        pcdType: EdDSATicketPCDPackage.name,\n        value: undefined,\n        userProvided: true,\n        validatorParams: {\n          eventIds: this.props.faucetConfig.modules.zupass.event.eventIds,\n          productIds: this.props.faucetConfig.modules.zupass.event.productIds,\n          notFoundMessage: \"No eligible PCDs found\"\n        }\n      },\n      identity: {\n        argumentType: ArgumentTypeName.PCD,\n        pcdType: SemaphoreIdentityPCDPackage.name,\n        value: undefined,\n        userProvided: true\n      },\n      validEventIds: {\n        argumentType: ArgumentTypeName.StringArray,\n        value: this.props.faucetConfig.modules.zupass.event.eventIds.length != 0 ? this.props.faucetConfig.modules.zupass.event.eventIds : undefined,\n        userProvided: false\n      },\n      fieldsToReveal: {\n        argumentType: ArgumentTypeName.ToggleList,\n        value: {\n          revealTicketId: true,\n          revealEventId: true,\n          revealAttendeeSemaphoreId: true,\n          revealProductId: true,\n        },\n        userProvided: false\n      },\n      externalNullifier: {\n        argumentType: ArgumentTypeName.BigInt,\n        value: this.props.faucetConfig.modules.zupass.nullifier,\n        userProvided: false\n      },\n      watermark: {\n        argumentType: ArgumentTypeName.BigInt,\n        value: this.props.faucetConfig.modules.zupass.watermark,\n        userProvided: false\n      }\n    };\n\n    const req: PCDGetRequest<typeof ZKEdDSAEventTicketPCDPackage> = {\n      type: PCDRequestType.Get,\n      returnUrl: this.props.faucetConfig.modules.zupass.redirectUrl || this.props.faucetContext.faucetApi.getApiUrl(\"/zupassCallback\", true),\n      args: args,\n      pcdType: \"zk-eddsa-event-ticket-pcd\",\n      options: {\n        genericProveScreen: true,\n        title: \"ZKEdDSA Proof\",\n        description: \"zkeddsa ticket pcd request\"\n      }\n    };\n    const encReq = encodeURIComponent(JSON.stringify(req));\n    let url = `${this.props.faucetConfig.modules.zupass.url}#/prove?request=${encReq}`;\n\n    this.loginPopop = window.open(url, \"_blank\", \"width=450,height=600,top=100,popup\");\n\n    if(!this.state.popupOpen) {\n      this.setState({\n        popupOpen: true,\n      }, () => {\n        this.pollPopupState();\n      });\n    }\n  }\n  \n  private onLogoutClick() {\n    localStorage.removeItem(\"zupass.AuthInfo\");\n    this.setState({\n      authInfo: null,\n    });\n  }\n\n\n  private pollPopupState() {\n    if(!this.loginPopop)\n      return;\n    \n    if(!this.state.popupOpen)\n      return;\n    if(this.loginPopop.closed) {\n      this.setState({\n        popupOpen: false,\n      });\n      this.loginPopop = null;\n    }\n    else {\n      setTimeout(() => this.pollPopupState(), 1000);\n    }\n  }\n\n  private processWindowMessage(evt: MessageEvent) {\n    if(!evt.data || typeof evt.data !== \"object\" || evt.data.authModule !== \"zupass\" || !evt.data.authResult)\n      return;\n    this.processLoginResult(evt.data.authResult);\n  }\n\n  private processLoginResult(authResult: any) {\n    console.log(\"Zupass auth: \", authResult);\n    if(this.loginPopop)\n      this.loginPopop.close();\n    if(authResult.data) {\n      this.loadAuthInfo(authResult.data);\n      localStorage['zupass.AuthInfo'] = JSON.stringify(authResult.data);\n    }\n    else if(authResult.errorCode) {\n      this.props.faucetContext.showDialog({\n        title: \"Could not authenticate with zupass\",\n        body: (<div className='alert alert-danger'>[{authResult.errorCode}] {authResult.errorMessage}</div>),\n        closeButton: { caption: \"Close\" },\n      });\n    }\n  }\n\n  private loadAuthInfo(authInfo: IZupassAuthInfo) {\n    this.setState({\n      authInfo: authInfo,\n    });\n  }\n\n}\n\nexport default (props) => {\n  return (\n    <ZupassLogin \n      {...props}\n    />\n  );\n};\n"],"names":["PCDRequestType","ZupassLogin","_React$PureComponent","_inherits","_super","_createSuper","props","state","_this","_classCallCheck","_defineProperty","_assertThisInitialized","call","forwardRef","current","messageEvtListener","evt","processWindowMessage","popupOpen","authInfo","key","value","window","addEventListener","this","localStorage","processLoginResult","JSON","parse","removeItem","ex","console","error","loadAuthInfo","removeEventListener","loginPopop","React","className","style","backgroundImage","renderLoginState","renderLoginButton","_this2","onClick","onLoginClick","href","preventDefault","src","_this3","OverlayTrigger","placement","delay","show","hide","overlay","renderZupassTicketInfo","attendeeId","onLogoutClick","ticketInfo","Tooltip","_extends","id","ticketId","eventId","productId","_this$state$authInfo","token","_this4","args","ticket","argumentType","ArgumentTypeName","PCD","pcdType","EdDSATicketPCDPackage","name","undefined","userProvided","validatorParams","eventIds","faucetConfig","modules","zupass","event","productIds","notFoundMessage","identity","SemaphoreIdentityPCDPackage","validEventIds","StringArray","length","fieldsToReveal","ToggleList","revealTicketId","revealEventId","revealAttendeeSemaphoreId","revealProductId","externalNullifier","BigInt","nullifier","watermark","req","type","Get","returnUrl","redirectUrl","faucetContext","faucetApi","getApiUrl","options","genericProveScreen","title","description","encReq","encodeURIComponent","stringify","url","concat","open","setState","pollPopupState","_this5","closed","setTimeout","data","_typeof","authModule","authResult","log","close","errorCode","showDialog","body","errorMessage","closeButton","caption"],"sourceRoot":""}